#!/usr/bin/python
import logging
import time
import sys
sys.path.insert(0, "/usr/share/retrace-server/")
from retrace import *
from plugins import *

starttime = int(time.time())
task = None
log = None
stats = {
  "taskid": None,
  "package": None,
  "version": None,
  "arch": None,
  "starttime": starttime,
  "duration": None,
  "coresize": None,
  "status": STATUS_FAIL,
}

def fail(exitcode=1):
    "Kills script with given exitcode"
    global log, task
    task.set_status(STATUS_FAIL)
    if log:
        task.set_log(log.getvalue())
    task.set_finished_time(int(time.time()))
    stats["duration"] = int(time.time()) - stats["starttime"]
    save_crashstats(stats)
    if not task.get_type() in [TASK_DEBUG, TASK_RETRACE_INTERACTIVE, TASK_VMCORE_INTERACTIVE]:
        task.clean()
    sys.exit(exitcode)

def retrace_run(errorcode, cmd):
    "Runs cmd using subprocess.Popen and kills script with errorcode on failure"
    try:
        child = Popen(cmd, stdout=PIPE, stderr=STDOUT)
        output = child.communicate()[0]
    except Exception as ex:
        child = None
        logging.error("An unhandled exception occured: %s" % ex)

    if not child or child.returncode != 0:
        logging.error("%s exitted with %d\n=== OUTPUT ===\n%s" % (" ".join(cmd), child.returncode, output))
        fail(errorcode)

    return output

def start_retrace():
    crashdir = os.path.join(task.get_savedir(), "crash")
    corepath = os.path.join(crashdir, "coredump")

    try:
        stats["coresize"] = os.path.getsize(corepath)
    except:
        pass

    if cmdline.arch:
        logging.debug("Using architecture from command line: %s" % cmdline.arch)
        arch = cmdline.arch
    else:
        # read architecture from coredump
        arch = guess_arch(corepath)

        if not arch:
            logging.error("Unable to determine architecture from coredump")
            fail()

        logging.debug("Determined architecture: %s" % arch)

    stats["arch"] = arch

    # read package file
    try:
        with open(os.path.join(crashdir, "package"), "r") as package_file:
            crash_package = package_file.read(ALLOWED_FILES["package"])
    except Exception as ex:
        loging.error("Unable to read crash package from 'package' file: %s" % ex)
        fail()

    # read package file
    if not INPUT_PACKAGE_PARSER.match(crash_package):
        logging.error("Invalid package name: %s" % crash_package)
        fail()

    pkgdata = parse_rpm_name(crash_package)
    if not pkgdata["name"]:
        logging.error("Unable to parse package name: %s" % crash_package)
        fail()

    stats["package"] = pkgdata["name"]
    if pkgdata["epoch"] != 0:
        stats["version"] = "%s:%s-%s" % (pkgdata["epoch"], pkgdata["version"], pkgdata["release"])
    else:
        stats["version"] = "%s-%s" % (pkgdata["version"], pkgdata["release"])

    # read release, distribution and version from release file
    release_path = None
    rootdir = None
    rootdir_path = os.path.join(crashdir, "rootdir")
    if os.path.isfile(rootdir_path):
        with open(rootdir_path, "r") as rootdir_file:
            rootdir = rootdir_file.read(ALLOWED_FILES["rootdir"])

        exec_path = os.path.join(crashdir, "executable")
        with open(exec_path, "r") as exec_file:
            executable = exec_file.read(ALLOWED_FILES["executable"])

        if executable.startswith(rootdir):
            with open(exec_path, "w") as exec_file:
                exec_file.write(executable[len(rootdir):])

        rel_path = os.path.join(crashdir, "os_release_in_rootdir")
        if os.path.isfile(rel_path):
            release_path = rel_path

    if not release_path:
        release_path = os.path.join(crashdir, "os_release")
        if not os.path.isfile(release_path):
            release_path = os.path.join(crashdir, "release")

    release = "Unknown Release"
    try:
        with open(release_path, "r") as release_file:
            release = release_file.read(ALLOWED_FILES["os_release"])

        version = distribution = None
        for plugin in PLUGINS:
            match = plugin.abrtparser.match(release)
            if match:
                version = match.group(1)
                distribution = plugin.distribution
                break

        if not version or not distribution:
            raise Exception, "Unknown release '%s'" % release

    except Exception as ex:
        logging.error("Unable to read distribution and version from 'release' file: %s" % ex)
        logging.info("Trying to guess distribution and version")
        distribution, version = guess_release(crash_package, PLUGINS)
        if distribution and version:
            logging.info("%s-%s" % (distribution, version))
        else:
            logging.error("Failure")
            fail()

    if "rawhide" in release.lower():
        version = "rawhide"

    releaseid = "%s-%s-%s" % (distribution, version, arch)
    if not releaseid in get_supported_releases():
        logging.error("Release '%s' is not supported" % releaseid)
        fail()

    if not is_package_known(crash_package, arch, releaseid):
        logging.error("Package '%s.%s' was not recognized.\nIs it a part of "
                      "official %s repositories?" % (crash_package, arch, release))
        fail()

    packages = [crash_package]
    missing = []
    fafrepo = ""

    if CONFIG["UseFafPackages"]:
        packages = ["bash", "cpio", "glibc-debuginfo"]
        child = Popen(["/usr/bin/faf-c2p", "--hardlink-dir", CONFIG["FafLinkDir"],
                       os.path.join(crashdir, "coredump")], stdout=PIPE, stderr=PIPE)
        stdout, stderr = child.communicate()
        fafrepo = stdout.strip()
        if stderr:
            logging.warn(stderr)

        # hack - use latest glibc - for some reason gives better results
        for filename in os.listdir(fafrepo):
            if filename.startswith("glibc"):
                os.unlink(os.path.join(fafrepo, filename))
    else:
        # read required packages from coredump
        try:
            repoid = "%s%s" % (REPO_PREFIX, releaseid)
            yumcfgpath = os.path.join(task.get_savedir(), "yum.conf")
            with open(yumcfgpath, "w") as yumcfg:
                yumcfg.write("[%s]\n" % repoid)
                yumcfg.write("name=%s\n" % releaseid)
                yumcfg.write("baseurl=file://%s/%s/\n" % (CONFIG["RepoDir"], releaseid))
                yumcfg.write("failovermethod=priority\n")

            child = Popen(["coredump2packages", os.path.join(crashdir, "coredump"),
                           "--repos=%s" % repoid, "--config=%s" % yumcfgpath],
                          stdout=PIPE, stderr=PIPE)
            section = 0
            crash_package_or_component = None
            stdout, stderr = child.communicate()
            lines = stdout.split("\n")
            libdb = False
            for line in lines:
                if line == "":
                    section += 1
                    continue
                elif 0 == section:
                    crash_package_or_component = line.strip()
                elif 1 == section:
                    stripped = line.strip()

                    # hack - help to depsolver, yum would fail otherwise
                    if distribution == "fedora" and stripped.startswith("gnome"):
                        packages.append("desktop-backgrounds-gnome")

                    # hack - libdb-debuginfo and db4-debuginfo are conflicting
                    if distribution == "fedora" and \
                       (stripped.startswith("db4-debuginfo") or \
                        stripped.startswith("libdb-debuginfo")):
                        if libdb:
                            continue
                        else:
                            libdb = True

                    packages.append(stripped)
                elif 2 == section:
                    soname, buildid = line.strip().split(" ", 1)
                    if not soname or soname == "-":
                        soname = None
                    missing.append((soname, buildid))

            if stderr:
                logging.warn(stderr)

        except Exception as ex:
            logging.error("Unable to obtain packages from 'coredump' file: %s" % ex)
            fail()

    # create mock config file
    try:
        with open(os.path.join(task.get_savedir(), "default.cfg"), "w") as mockcfg:
            mockcfg.write("config_opts['root'] = '%d'\n" % task.get_taskid())
            mockcfg.write("config_opts['target_arch'] = '%s'\n" % arch)
            mockcfg.write("config_opts['chroot_setup_cmd'] = '--skip-broken install %s shadow-utils gdb rpm'\n" % " ".join(packages))
            mockcfg.write("config_opts['plugin_conf']['ccache_enable'] = False\n")
            mockcfg.write("config_opts['plugin_conf']['yum_cache_enable'] = False\n")
            mockcfg.write("config_opts['plugin_conf']['root_cache_enable'] = False\n")
            mockcfg.write("config_opts['plugin_conf']['bind_mount_enable'] = True\n")
            mockcfg.write("config_opts['plugin_conf']['bind_mount_opts'] = { 'create_dirs': True,\n")
            mockcfg.write("    'dirs': [\n")
            mockcfg.write("              ('%s', '/var/spool/abrt/crash'),\n" % crashdir)
            if CONFIG["UseFafPackages"]:
                mockcfg.write("              ('%s', '/packages'),\n" % fafrepo)
            mockcfg.write("            ] }\n")
            mockcfg.write("\n")
            mockcfg.write("config_opts['yum.conf'] = \"\"\"\n")
            mockcfg.write("[main]\n")
            mockcfg.write("cachedir=/var/cache/yum\n")
            mockcfg.write("debuglevel=1\n")
            mockcfg.write("reposdir=/dev/null\n")
            mockcfg.write("logfile=/var/log/yum.log\n")
            mockcfg.write("retries=20\n")
            mockcfg.write("obsoletes=1\n")
            if version != "rawhide" and CONFIG["RequireGPGCheck"]:
                mockcfg.write("gpgcheck=1\n")
            else:
                mockcfg.write("gpgcheck=0\n")
            mockcfg.write("assumeyes=1\n")
            mockcfg.write("syslog_ident=mock\n")
            mockcfg.write("syslog_device=\n")
            mockcfg.write("\n")
            mockcfg.write("#repos\n")
            mockcfg.write("\n")
            mockcfg.write("[%s]\n" % distribution)
            mockcfg.write("name=%s\n" % releaseid)
            mockcfg.write("baseurl=file://%s/%s/\n" % (CONFIG["RepoDir"], releaseid))
            mockcfg.write("failovermethod=priority\n")
            if version != "rawhide" and CONFIG["RequireGPGCheck"]:
                mockcfg.write("gpgkey=file:///usr/share/retrace-server/gpg/%s-%s\n" % (distribution, version))
            mockcfg.write("\"\"\"\n")

        # symlink defaults from /etc/mock
        os.symlink("/etc/mock/site-defaults.cfg", os.path.join(task.get_savedir(), "site-defaults.cfg"))
        os.symlink("/etc/mock/logging.ini", os.path.join(task.get_savedir(), "logging.ini"))
    except Exception as ex:
        logging.error("Unable to create mock config file: %s" % ex)
        fail()

    # run retrace
    task.set_status(STATUS_INIT)
    logging.info(STATUS[STATUS_INIT])

    retrace_run(25, ["/usr/bin/mock", "init", "--configdir", task.get_savedir()])
    if CONFIG["UseFafPackages"]:
        retrace_run(26, ["/usr/bin/mock", "--configdir", task.get_savedir(), "shell", "--",
                         "bash", "-c", "'for PKG in /packages/*; do rpm2cpio \\$PKG | " \
                         "cpio -muid --quiet; done'"])
    retrace_run(27, ["/usr/bin/mock", "--configdir", task.get_savedir(), "shell",
                     "--", "chgrp", "-R", "mockbuild", "/var/spool/abrt/crash"])

    # generate backtrace
    task.set_status(STATUS_BACKTRACE)
    logging.info(STATUS[STATUS_BACKTRACE])

    try:
        backtrace = run_gdb(task.get_savedir())
    except Exception as ex:
        logging.error(str(ex))
        fail()

    task.set_backtrace(backtrace)

    # does not work at the moment
    rootsize = 0

    if not task.get_type() in [TASK_DEBUG, TASK_RETRACE_INTERACTIVE]:
        # clean up temporary data
        task.set_status(STATUS_CLEANUP)
        logging.info(STATUS[STATUS_CLEANUP])

        task.clean()
        if CONFIG["UseFafPackages"]:
            shutil.rmtree(fafrepo)

        # ignore error: workdir = savedir => workdir is not empty
        if CONFIG["UseWorkDir"]:
            try:
                os.rmdir(workdir)
            except:
                pass

    # save crash statistics
    task.set_status(STATUS_STATS)
    logging.info(STATUS[STATUS_STATS])

    task.set_finished_time(int(time.time()))
    stats["duration"] = int(time.time()) - stats["starttime"]
    stats["status"] = STATUS_SUCCESS

    try:
        con = init_crashstats_db()
        statsid = save_crashstats(stats, con)
        save_crashstats_success(statsid, prerunning, len(get_active_tasks()), rootsize, con)
        save_crashstats_packages(statsid, packages[1:], con)
        if missing:
            save_crashstats_build_ids(statsid, missing, con)
        con.close()
    except Exception as ex:
        logging.warn(str(ex))

    # publish log => finish task
    logging.info("Retrace took %d seconds" % stats["duration"])

    if log:
        task.set_log(log.getvalue())

    logging.info(STATUS[STATUS_SUCCESS])
    task.set_status(STATUS_SUCCESS)

def mock_find_vmlinux(cfgdir, candidates):
    with open("/dev/null", "w") as null:
        for cand in candidates:
            child = Popen(["/usr/bin/mock", "--configdir", cfgdir, "shell", "--",
                           "test", "-f", cand, "&&", "echo", cand], stdout=PIPE, stderr=null)
            output = child.communicate()[0].strip()
            child.wait()
            if output == cand:
                return cand

    return None

def start_vmcore():
    vmcore = os.path.join(task.get_savedir(), "crash", "vmcore")

    if cmdline.kernelver:
        kernelver = "%s.%s" % (cmdline.kernelver, cmdline.arch)
        logging.debug("Using kernel version from command line: %s" % kernelver)
    else:
        kernelver = get_kernel_release(vmcore)
        if not kernelver:
            logging.error("Unable to determine kernel version")
            fail()

        logging.debug("Determined kernel version: %s" % kernelver)

    match = KERNEL_RELEASE_PARSER.match(kernelver)
    if not match:
        logging.error("Unable to parse kernel version")
        fail()

    kernelver_noarch = match.group(1)
    arch = match.group(4)
    if arch in ["i486", "i586", "i686"]:
        arch = "i386"

    stats["package"] = "kernel"
    stats["version"] = kernelver_noarch
    stats["arch"] = arch

    kernelcache = os.path.join(CONFIG["RepoDir"], "kernel")
    kerneltmp = os.path.join(kernelcache, "%s.tmp" % kernelver)
    hostarch = os.uname()[4]
    if hostarch in ["i486", "i586", "i686"]:
        hostarch = "i386"

    logging.info(STATUS[STATUS_INIT])
    task.set_status(STATUS_INIT)
    vmlinux = ""

    # cross-arch: we need to use chroot
    if hostarch != arch:
        cfgdir = os.path.join(CONFIG["SaveDir"], "kernel-%s" % arch)
        tmpdir = os.path.join(CONFIG["SaveDir"], "kernel-%s.tmp" % arch)
        wait = False
        if not os.path.isdir(cfgdir):
            try:
                os.mkdir(tmpdir)
            except OSError as ex:
                if ex[0] == errno.EEXIST:
                    wait = True
                else:
                    raise ex

            # no exception - we are the one who prepares the chroot
            if not wait:
                # create mock config file
                try:
                    with open(os.path.join(tmpdir, "default.cfg"), "w") as mockcfg:
                        mockcfg.write("config_opts['root'] = 'kernel-%s'\n" % arch)
                        mockcfg.write("config_opts['target_arch'] = '%s'\n" % arch)
                        mockcfg.write("config_opts['chroot_setup_cmd'] = 'install bash coreutils cpio crash rpm shadow-utils'\n")
                        mockcfg.write("config_opts['plugin_conf']['ccache_enable'] = False\n")
                        mockcfg.write("config_opts['plugin_conf']['yum_cache_enable'] = False\n")
                        mockcfg.write("config_opts['plugin_conf']['root_cache_enable'] = False\n")
                        mockcfg.write("config_opts['plugin_conf']['bind_mount_enable'] = True\n")
                        mockcfg.write("config_opts['plugin_conf']['bind_mount_opts'] = { \n")
                        mockcfg.write("    'dirs': [('%s', '%s'),\n" % (CONFIG["RepoDir"], CONFIG["RepoDir"]))
                        mockcfg.write("             ('%s', '%s'),],\n" % (CONFIG["SaveDir"], CONFIG["SaveDir"]))
                        mockcfg.write("    'create_dirs': True, }\n")
                        mockcfg.write("\n")
                        mockcfg.write("config_opts['yum.conf'] = \"\"\"\n")
                        mockcfg.write("[main]\n")
                        mockcfg.write("cachedir=/var/cache/yum\n")
                        mockcfg.write("debuglevel=1\n")
                        mockcfg.write("reposdir=/dev/null\n")
                        mockcfg.write("logfile=/var/log/yum.log\n")
                        mockcfg.write("retries=20\n")
                        mockcfg.write("obsoletes=1\n")
                        mockcfg.write("assumeyes=1\n")
                        mockcfg.write("syslog_ident=mock\n")
                        mockcfg.write("syslog_device=\n")
                        mockcfg.write("\n")
                        mockcfg.write("#repos\n")
                        mockcfg.write("\n")
                        mockcfg.write("[kernel-%s]\n" % arch)
                        mockcfg.write("name=kernel-%s\n" % arch)
                        mockcfg.write("baseurl=%s\n" % CONFIG["KernelChrootRepo"].replace("$ARCH", arch))
                        mockcfg.write("failovermethod=priority\n")
                        mockcfg.write("\"\"\"\n")

                    # symlink defaults from /etc/mock
                    os.symlink("/etc/mock/site-defaults.cfg", os.path.join(tmpdir, "site-defaults.cfg"))
                    os.symlink("/etc/mock/logging.ini", os.path.join(tmpdir, "logging.ini"))
                except Exception as ex:
                    logging.error("Unable to create mock config file: %s" % ex)
                    shutil.rmtree(tmpdir)
                    fail()

                child = Popen(["/usr/bin/mock", "--configdir", tmpdir, "init"], stdout=PIPE, stderr=STDOUT)
                stdout = child.communicate()[0]
                if child.wait():
                    logging.error("mock exitted with %d:\n%s" % (child.returncode, stdout))
                    shutil.rmtree(tmpdir)
                    fail()

                try:
                    os.rename(tmpdir, cfgdir)
                except OSError as ex:
                    if ex[0] == errno.EEXIST:
                        pass
                    else:
                        raise ex

        # someone else is preparing the chroot, wait for him to finish
        if wait:
            i = 0
            while i < 1800 and not os.path.isdir(cfgdir):
                i += 1
                time.sleep(1)

            # error
            if i >= 1800:
                logging.error("Waiting for chroot timed out")
                fail()

        lockfile = os.path.join(cfgdir, ".lock")
        i = 0
        while i < 1800 and not lock(lockfile):
            i += 1
            time.sleep(1)

        # error
        if i >= 1800:
            logging.error("Waiting for chroot lock timed out")
            fail()

        # we have the lock, let's work
        try:
            vmlinux = prepare_debuginfo(vmcore, cfgdir)

            # generate the log
            with open("/dev/null", "w") as null:
                child = Popen(["/usr/bin/mock", "--configdir", cfgdir, "shell", "--",
                               "crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=null)
                kernellog = child.communicate("log\nquit\n")[0]
                if child.wait():
                    logging.warn("crash 'log' exitted with %d" % child.returncode)

                child = Popen(["/usr/bin/mock", "--configdir", cfgdir, "shell", "--",
                               "crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=null)
                crash_bt_a = child.communicate("bt -a\nquit\n")[0]
                if child.wait():
                    logging.warn("crash 'bt -a' exitted with %d" % child.returncode)
                    crash_bt_a = None

                child = Popen(["/usr/bin/mock", "--configdir", cfgdir, "shell", "--",
                               "crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=null)
                crash_kmem_f = child.communicate("kmem -f\nquit\n")[0]
                if child.wait():
                    logging.warn("crash 'kmem -f' exitted with %d" % child.returncode)
                    crash_kmem_f = None

                child = Popen(["/usr/bin/mock", "--configdir", cfgdir, "shell", "--",
                               "crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=null)
                crash_sys = child.communicate("sys\nquit\n")[0]
                if child.wait():
                    logging.warn("crash 'sys' exitted with %d" % child.returncode)
                    crash_sys = None

                child = Popen(["/usr/bin/mock", "--configdir", cfgdir, "shell", "--",
                               "crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=null)
                crash_sys_c = child.communicate("sys -c\nquit\n")[0]
                if child.wait():
                    logging.warn("crash 'sys -c' exitted with %d" % child.returncode)
                    crash_sys_c = None

                child = Popen(["/usr/bin/mock", "--configdir", cfgdir, "shell", "--",
                               "crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=null)
                crash_foreach_bt = child.communicate("foreach bt\nquit\n")[0]
                if child.wait():
                    logging.warn("crash 'foreach bt' exitted with %d" % child.returncode)
                    crash_foreach_bt = None

        except Exception as ex:
            logging.error(str(ex))
            unlock(lockfile)
            fail()

        unlock(lockfile)
    else:
        # only let one worker unpack the same debuginfo at one time
        lockfile = os.path.join("/tmp", "%s.lock" % kernelver)
        i = 0
        while i < 1800 and not lock(lockfile):
            i += 1
            time.sleep(1)

        if i >= 1800:
            logging.error("waiting for debuginfo timed out")
            fail()

        try:
            vmlinux = prepare_debuginfo(vmcore)
        except Exception as ex:
            logging.error(str(ex))
            unlock(lockfile)
            fail()

        unlock(lockfile)

        task.set_status(STATUS_BACKTRACE)
        logging.info(STATUS[STATUS_BACKTRACE])

        child = Popen(["crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
        kernellog = child.communicate("log\nquit\n")[0]
        if child.wait():
            logging.warn("crash 'log' exited with %d" % child.returncode)

        child = Popen(["crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
        crash_bt_a = child.communicate("bt -a\nquit\n")[0]
        if child.wait():
            logging.warn("crash 'bt -a' exited with %d" % child.returncode)
            crash_bt_a = None

        child = Popen(["crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
        crash_kmem_f = child.communicate("kmem -f\nquit\n")[0]
        if child.wait():
            logging.warn("crash 'kmem -f' exited with %d" % child.returncode)
            crash_kmem_f = None

        child = Popen(["crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
        crash_sys = child.communicate("sys\nquit\n")[0]
        if child.wait():
            logging.warn("crash 'sys' exited with %d" % child.returncode)
            crash_sys = None

        child = Popen(["crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
        crash_sys_c = child.communicate("sys -c\nquit\n")[0]
        if child.wait():
            logging.warn("crash 'sys -c' exited with %d" % child.returncode)
            crash_sys_c = None

        child = Popen(["crash", "-s", vmcore, vmlinux], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
        crash_foreach_bt = child.communicate("foreach bt\nquit\n")[0]
        if child.wait():
            logging.warn("crash 'foreach bt' exited with %d" % child.returncode)
            crash_foreach_bt = None

    task.set_backtrace(kernellog)
    if crash_bt_a:
        task.add_misc("bt-a", crash_bt_a)
    if crash_kmem_f:
        task.add_misc("kmem-f", crash_kmem_f)
    if crash_sys:
        task.add_misc("sys", crash_sys)
    if crash_sys_c:
        task.add_misc("sys-c", crash_sys_c)
    if crash_foreach_bt:
        child = Popen(["bt_filter"], stdin=PIPE, stdout=PIPE, stderr=STDOUT)
        bt_filter = child.communicate(crash_foreach_bt)[0]
        if child.wait():
            bt_filter = "bt_filter exitted with %d\n\n%s" % (child.returncode, bt_filter)

        task.add_misc("bt-filter", bt_filter)

    if "/" in vmlinux:
        task.set_crashrc("mod -S %s" % vmlinux.rsplit("/", 1)[0])

    task.set_finished_time(int(time.time()))
    stats["duration"] = int(time.time()) - stats["starttime"]
    stats["status"] = STATUS_SUCCESS

    logging.info(STATUS[STATUS_STATS])

    try:
        save_crashstats(stats)
    except Exception as ex:
        logging.error(str(ex))

    # clean up temporary data
    task.set_status(STATUS_CLEANUP)
    logging.info(STATUS[STATUS_CLEANUP])

    if not task.get_type() in [TASK_VMCORE_INTERACTIVE]:
        task.clean()

    logging.info("Retrace took %d seconds" % stats["duration"])
    logging.info(STATUS[STATUS_SUCCESS])

    if log:
        task.set_log(log.getvalue())
    task.set_status(STATUS_SUCCESS)

if __name__ == "__main__":
    cmdline_parser = ArgumentParser(description="Execute a retrace job")
    cmdline_parser.add_argument("task_id", type=int, help="Task ID (%s/<task_id>) must exist" % CONFIG["SaveDir"])
    cmdline_parser.add_argument("--foreground", action="store_true", default=False, help="Do not fork to background")
    cmdline_parser.add_argument("--kernelver", help="VR (eg. 2.6.32-287.el6), also needs --arch")
    cmdline_parser.add_argument("--arch", help="Architecture")
    cmdline = cmdline_parser.parse_args()

    log = cmdline._log

    # do not use logging
    if cmdline.kernelver and not cmdline.arch:
        sys.stderr.write("You also need to specify architecture when overriding kernel version\n")
        exit(1)

    try:
        task = RetraceTask(cmdline.task_id)
    except:
        logging.error("Task '%d' does not exist" % cmdline.task_id)
        exit(1)

    if task.has_status():
        logging.error("%s has already been executed for task %d" % (sys.argv[0], cmdline.task_id))
        exit(1)

    task.set_started_time(int(time.time()))

    if not cmdline.foreground:
        try:
            pid = os.fork()
        except:
            logging.error("Unable to fork")
            exit(1)

        # parent - kill
        if pid != 0:
            exit(0)

    stats["taskid"] = cmdline.task_id

    prerunning = len(get_active_tasks()) - 1

    if task.has_remote():
        task.set_status(STATUS_DOWNLOADING)
        logging.info(STATUS[STATUS_DOWNLOADING])
        errors = task.download_remote()
        if errors:
            for error in errors:
                logging.warn(error)

    task.set_status(STATUS_ANALYZE)
    logging.info(STATUS[STATUS_ANALYZE])

    crashdir = os.path.join(task.get_savedir(), "crash")

    tasktype = task.get_type()

    for required_file in REQUIRED_FILES[tasktype]:
        if not os.path.isfile(os.path.join(crashdir, required_file)):
            logging.error("Crash directory does not contain required file '%s'" % required_file)
            exit(1)

    try:
        if tasktype in [TASK_RETRACE, TASK_DEBUG, TASK_RETRACE_INTERACTIVE]:
            start_retrace()
        elif tasktype in [TASK_VMCORE, TASK_VMCORE_INTERACTIVE]:
            start_vmcore()
        else:
            raise Exception, "Unsupported task type"
    except Exception as ex:
        sys.stderr.write(str(ex))
        exit(1)
