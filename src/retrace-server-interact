#!/usr/bin/python
import argparse
import grp
import os
import sys
from retrace import *

ACTIONS = ["shell", "gdb", "crash", "printdir"]

def print_cmdline(cmdline):
    sys.stderr.write("If you want to execute the command manually, you can run\n")
    sys.stderr.write("$ %s\n\n" % " ".join(cmdline))

if __name__ == "__main__":
    groups = [grp.getgrgid(g).gr_name for g in os.getgroups()]
    if not CONFIG["AuthGroup"] in groups:
        sys.stderr.write("You must be a member '%s' group in order to use "
                         "interactive debugging.\n" % CONFIG["AuthGroup"])
        exit(1)

    parser = argparse.ArgumentParser(description="Interact with retrace-server's chroot")
    parser.add_argument("task_id", help="Task ID")
    parser.add_argument("action", help="Desired action (%s)" % "|".join(ACTIONS))
    parser.add_argument("--priv", default=False, action="store_true", help="Run with root privileges")
    args = parser.parse_args()

    if not args.action in ACTIONS:
        sys.stderr.write("Invalid action. Allowed actions are: '%s'.\n" % "', '".join(ACTIONS))
        exit(1)

    try:
        taskid = int(args.task_id)
        task = RetraceTask(taskid)
    except Exception as ex:
        sys.stderr.write("%s\n" % ex)
        exit(1)

    if args.action == "printdir":
        sys.stdout.write("%s\n" % task.get_savedir())
        exit(0)

    if task.get_type() == TASK_RETRACE_INTERACTIVE:
        if args.action == "shell":
            cmdline = ["mock", "--configdir", task.get_savedir(), "shell"]
            if not args.priv:
                cmdline.append("--unpriv")

            print_cmdline(cmdline)
            os.execvp(cmdline[0], cmdline)
        if args.action == "gdb":
            with open(os.path.join(task.get_savedir(), "crash", "executable"), "r") as exec_file:
                executable = exec_file.read(ALLOWED_FILES["executable"])
            if "'" in executable or '"' in executable:
                sys.stderr.write("executable contains forbidden characters.\n")
                exit(1)

            cmdline = ["mock", "--configdir", task.get_savedir(), "shell",
                       "gdb '%s' /var/spool/abrt/crash/coredump" % executable]
            if not args.priv:
                cmdline.append("--unpriv")

            print_cmdline(cmdline)
            os.execvp(cmdline[0], cmdline)

        sys.stderr.write("Action '%s' is not allowed for coredumps.\n" % args.action)
        exit(1)
    elif task.get_type() == TASK_VMCORE_INTERACTIVE:
        vmcore = os.path.join(task.get_savedir(), "crash", "vmcore")
        kernelver = get_kernel_release(vmcore)
        match = KERNEL_RELEASE_PARSER.match(kernelver)
        if not match:
            sys.stderr.write("Unable to parse kernel release.\n")
            exit(1)

        arch = match.group(4)
        if arch in ["i486", "i586", "i686"]:
            arch = "i386"

        hostarch = os.uname()[4]
        if hostarch in ["i486", "i586", "i686"]:
            hostarch = "i386"

        if args.action == "crash":
            if arch == hostarch:
                vmlinux = prepare_debuginfo(vmcore)
                if task.has_crashrc():
                    cmdline = ["crash", "-s", "-i", task.get_crashrc_path(), vmcore, vmlinux]
                else:
                    cmdline = ["crash", "-s", vmcore, vmlinux]
            else:
                cfgdir = os.path.join(CONFIG["SaveDir"], "kernel-%s" % arch)
                vmlinux = prepare_debuginfo(vmcore, chroot=cfgdir)
                if task.has_crashrc():
                    cmdline = ["mock", "--configdir", cfgdir,
                               "shell", "crash -s %s %s" % (vmcore, vmlinux)]
                else:
                    cmdline = ["mock", "--configdir", cfgdir,
                               "shell", "crash -s -i %s %s %s" % (task.get_crashrc_path(), vmcore, vmlinux)]
                if not args.priv:
                    cmdline.append("--unpriv")

            print_cmdline(cmdline)
            os.execvp(cmdline[0], cmdline)

        if args.action == "shell":
            if arch != hostarch:
                cmdline = ["mock", "--configdir", os.path.join(CONFIG["SaveDir"], "kernel-%s" % arch), "shell"]
                if not args.priv:
                    cmdline.append("--unpriv")

                print_cmdline(cmdline)
                os.execvp(cmdline[0], cmdline)

            sys.stderr.write("The task does not require a chroot. You can use the current shell.\n")
            exit(1)

        sys.stderr.write("Action '%s' is not allowed for vmcores.\n" % args.action)
        exit(1)
    else:
        sys.stderr.write("The specified task was not intended for interactive debugging.\n")
        exit(1)
