#!/usr/bin/python

import os
import sys
from retrace import *

if __name__ == "__main__":
    logfile = os.path.join(CONFIG["LogDir"], "cleanup.log")

    with open(logfile, "a") as log:
        log.write(time.strftime("[%Y-%m-%d %H:%M:%S] Running cleanup\n"))

        # kill tasks running > 1 hour
        ps_output = run_ps()
        running_tasks = get_running_tasks(ps_output)
        for pid, taskid, runtime in running_tasks:
            # ToDo: 5 = mm:ss, >5 = hh:mm:ss
            if len(runtime) > 5:
                log.write("Killing task %d running for %s\n" % (taskid, runtime))
                kill_process_and_childs(pid, ps_output)

        # kill orphaned tasks
        running_tasks = get_running_tasks()
        running_ids = []
        for pid, taskid, runtime in running_tasks:
            running_ids.append(taskid)

        for taskid in get_active_tasks():
            if not taskid in running_ids:
                log.write("Cleaning up orphaned task %d\n" % taskid)
                try:
                    task = RetraceTask(taskid)
                except:
                    log.write("Unable to create RetraceTask object for task %d\n" % taskid)
                    continue

                task.clean()
                task.set_log("Killed by garbage collector", True)

        # clean up old tasks
        try:
            files = os.listdir(CONFIG["SaveDir"])
        except OSError, ex:
            files = []
            log.write("Error listing task directory: %s\n" % ex)

        for filename in files:
            try:
                task = RetraceTask(int(filename))
            except:
                continue

            if task.get_age() >= CONFIG["DeleteTaskAfter"]:
                log.write("Deleting old task %s\n" % filename)
                task.remove()
